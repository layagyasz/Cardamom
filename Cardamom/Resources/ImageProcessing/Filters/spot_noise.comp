#version 430 core

#define EPSILON 0.000001f

#define CHANNEL_RED 1
#define CHANNEL_GREEN 2
#define CHANNEL_BLUE 4
#define CHANNEL_ALPHA 8

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D in_texture;
layout(rgba32f, binding = 1) uniform image2D out_texture;

layout(location=0) uniform float frequency;
layout(location=1) uniform float lacunarity;
layout(location=2) uniform int octaves;
layout(location=3) uniform float persistence;
layout(location=4) uniform float amplitude;
layout(location=5) uniform ivec2 density;
layout(location=6) uniform vec2 scale;
layout(location=7) uniform int seed;
layout(location=8) uniform int channel;

const vec4 r0 = vec4(823746.0f, 12306.0f, 823452.0f, 3234874.0f);
const vec4 r1 = vec4(23784.0f, 9183.0f, 23874.0f, 27432.0f);
const vec4 r2 = vec4(12743.0f, 45191.0f, 144421.0f, 76671.0f);
const vec4 r3 = vec4(82734.0f, 900213.0f, 443241.0f, 199823.0f);

uint hash(uint x) 
{
    x += (x << 10u);
    x ^= (x >>  6u);
    x += (x <<  3u);
    x ^= (x >> 11u);
    x += (x << 15u);
    return x;
}

uint hash(uvec4 v, int seed) 
{ 
    return hash(v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ^ seed);
}

float construct_float(uint m) {
    const uint ieee_mantissa = 0x007FFFFFu;
    const uint ieee_one = 0x3F800000u;
    m &= ieee_mantissa;
    m |= ieee_one;
    float f = uintBitsToFloat(m);
    return f - 1.0;
}

float rand(vec4 v, int seed) {
	return construct_float(hash(floatBitsToUint(v), seed));
}

float generate_octave(vec3 position) {
	int gx = int(floor(position.x));
	int gy = int(floor(position.y));
	int gz = int(floor(position.z));
	float dx = position.x - gx;
	float dy = position.y - gy;
	float dz = position.z - gz;

	float val = -1f; 
	for (int x = -1; x < 2; x++)
	{
		for (int y = -1; y < 2; y++)
		{
			for (int z = -1; z < 2; z++)
			{
				vec4 s = vec4(gx + x, gy + y, gz + z, 1);
				int num_spots = int(round((density.y - density.x) * rand(s * r0, seed))) + density.x;
				for (int i = 0; i < num_spots; ++i)
				{
					s.w = i;
					float a = (scale.y - scale.x) * rand(s, seed) + scale.x;
					vec3 c = 
						vec3(
							dx - x - rand(s * r1, seed) - 0.5f,
							dy - y - rand(s * r2, seed) - 0.5f,
							dz - z - rand(s * r3, seed) - 0.5f) / a;
					val = max(val, 1f - clamp(dot(c, c), 0f, 2f));
				}
			}
		}
	}
	return val;
}

float generate(vec3 position) {
	float total = -1f;
    float a = amplitude;
	float f = frequency;
    for (int i = 0; i < octaves; ++i)
    {
        total = max(total, a * generate_octave(f * position));
        a *= persistence;
        f *= lacunarity;
    }
    return total;
}

void main() {
	ivec2 position = ivec2(gl_GlobalInvocationID.xy);
	vec4 input = imageLoad(in_texture, position);
	vec4 current = imageLoad(out_texture, position);
	float v = generate(input.xyz);
	vec4 new = 
		vec4(
			(channel & CHANNEL_RED) != 0 ? v : current.r,
			(channel & CHANNEL_GREEN) != 0 ? v : current.g,
			(channel & CHANNEL_BLUE) != 0 ? v : current.b,
			(channel & CHANNEL_ALPHA) != 0 ? v : current.a);
	imageStore(out_texture, position, new);
}