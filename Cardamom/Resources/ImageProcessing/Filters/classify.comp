#version 430 core

#define MODE_BLEND 1

#define CHANNEL_RED 1
#define CHANNEL_GREEN 2
#define CHANNEL_BLUE 4
#define CHANNEL_ALPHA 8

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D in_texture;
layout(rgba32f, binding = 1) uniform image2D out_texture;

layout(location=0) uniform int mode;
layout(location=1) uniform int classification_count;
layout(location=2) uniform vec4 colors[32];
layout(location=34) uniform vec4 centers[32];
layout(location=66) uniform vec4 axis_weights[32];
layout(location=98) uniform float weights[32];
layout(location=130) uniform float blend_ranges[32];
layout(location=162) uniform int channel;

vec4 generate(vec4 v) {
	vec4 result = vec4(0, 0, 0, 0);
	float weight_total = 0;
	float nearest = 0;
	vec4 nearest_color = vec4(0, 0, 0, 0);
	for (int i=0; i<classification_count; ++i) {
		vec4 d = (centers[i] - v) * axis_weights[i];
		float distance = dot(d, d);
		float c = weights[i] * max(0, 1 - distance / blend_ranges[i]);
		result += c * colors[i];
		weight_total += c;
		if (i ==0 || distance < nearest)
		{
			nearest = distance;
			nearest_color = colors[i];
		}
	}
	if (mode == MODE_BLEND)
	{
		return result / weight_total;
	}
	else
	{
		return nearest_color;
	}
}

void main() {
    ivec2 position = ivec2(gl_GlobalInvocationID.xy);
    vec4 input = imageLoad(in_texture, position);
	vec4 current = imageLoad(out_texture, position);
	vec4 classified = generate(input);
	vec4 new = 
		vec4(
			(channel & CHANNEL_RED) != 0 ? classified.r : current.r,
			(channel & CHANNEL_GREEN) != 0 ? classified.g : current.g,
			(channel & CHANNEL_BLUE) != 0 ? classified.b : current.b,
			(channel & CHANNEL_ALPHA) != 0 ? classified.a : current.a);
    imageStore(out_texture, position, new);
}