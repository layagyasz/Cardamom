#version 430 core

#define CHANNEL_RED 1
#define CHANNEL_GREEN 2
#define CHANNEL_BLUE 4
#define CHANNEL_ALPHA 8

#define PI 3.1415926535f
#define SQRT2 1.41421356237f

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D in_texture;
layout(rgba32f, binding = 1) uniform image2D out_texture;

layout(location=0) uniform vec4 mean;
layout(location=1) uniform vec4 standard_deviation;
layout(location=2) uniform int channel;

const float A = 8f * (PI - 3f) / (3f * PI * (4f - PI));

float erf_internal(float x) {
   float x2= x * x;
   return exp(-x2 * (4f / PI + A * x2) / (1f + A * x2));
}

float erf(float x) {
   float sign = 1f;
   if (x < 0f)
   {
	sign = -1f;
   }
   return sign * sqrt(1f - erf_internal(x));
}

float erfc(float x) {
   if (x>3.0) {
      return 0.5f * erf_internal(x);
   } else {
      return 1f - erf(x);
   }
}

float generate(float v, float v_mean, float v_standard_deviation) {
	return erfc((v_mean - v)/(v_standard_deviation * SQRT2)) - 1;
}

void main() {
    ivec2 position = ivec2(gl_GlobalInvocationID.xy);
    vec4 current = imageLoad(in_texture, position);
	vec4 new = 
		vec4(
			(channel & CHANNEL_RED) != 0 
				? generate(current.r, mean[0], standard_deviation[0]) : current.r,
			(channel & CHANNEL_GREEN) != 0 
				? generate(current.g, mean[1], standard_deviation[1]) : current.g,
			(channel & CHANNEL_BLUE) != 0 
				? generate(current.b, mean[2], standard_deviation[2]) : current.b,
			(channel & CHANNEL_ALPHA) != 0 
				? generate(current.a, mean[3], standard_deviation[3]) : current.a);
    imageStore(out_texture, position, new);
}