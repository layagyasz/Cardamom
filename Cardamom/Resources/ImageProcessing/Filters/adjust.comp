#version 430 core

#define CHANNEL_RED 1
#define CHANNEL_GREEN 2
#define CHANNEL_BLUE 4
#define CHANNEL_ALPHA 8

#define OVERFLOW_BEHAVIOR_NONE 0
#define OVERFLOW_BEHAVIOR_CLAMP 1
#define OVERFLOW_BEHAVIOR_MODULUS 2

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D in_texture;
layout(rgba32f, binding = 1) uniform image2D out_texture;

layout(location=0) uniform int overflow_behavior;
layout(location=1) uniform mat4 gradient;
layout(location=2) uniform vec4 bias;
layout(location=3) uniform int channel;

vec4 handle_overflow(vec4 v)
{
	switch (overflow_behavior)
	{
		case OVERFLOW_BEHAVIOR_CLAMP:
			return clamp(v, 0, 1);
		case OVERFLOW_BEHAVIOR_MODULUS:
			return mod(v, 1f);
	}
	return v;
}

vec4 generate(vec4 v) {
	return handle_overflow(v * gradient + bias);
}

void main() {
    ivec2 position = ivec2(gl_GlobalInvocationID.xy);
    vec4 current = imageLoad(in_texture, position);
	vec4 adjusted = generate(current);
	vec4 new = 
		vec4(
			(channel & CHANNEL_RED) != 0 ? adjusted.r : current.r,
			(channel & CHANNEL_GREEN) != 0 ? adjusted.g : current.g,
			(channel & CHANNEL_BLUE) != 0 ? adjusted.b : current.b,
			(channel & CHANNEL_ALPHA) != 0 ? adjusted.a : current.a);
    imageStore(out_texture, position, new);
}