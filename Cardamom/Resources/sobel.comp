#version 430 core

#define CHANNEL_RED 1
#define CHANNEL_GREEN 2
#define CHANNEL_BLUE 4
#define CHANNEL_ALPHA 8

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D in_texture;
layout(rgba32f, binding = 1) uniform image2D out_texture;

layout(location=0) uniform int channel_index;
layout(location=1) uniform int channel;

vec3 generate(ivec2 position) {
	vec4 x = 
		imageLoad(in_texture, position + ivec2(-1, -1))
		- imageLoad(in_texture, position + ivec2(1, -1))
		+ 2 * imageLoad(in_texture, position + ivec2(-1, 0))
		- 2 * imageLoad(in_texture, position + ivec2(1, 0))
		+ imageLoad(in_texture, position + ivec2(-1, 1))
		- imageLoad(in_texture, position + ivec2(1, 1));
	vec4 y =
		imageLoad(in_texture, position + ivec2(-1, -1))
		+ 2 * imageLoad(in_texture, position + ivec2(0, -1))
		+ imageLoad(in_texture, position + ivec2(1, -1))
		- imageLoad(in_texture, position + ivec2(-1, 1))
		- 2 * imageLoad(in_texture, position + ivec2(0, 1))
		- imageLoad(in_texture, position + ivec2(1, 1));
	return 0.5f * normalize(vec3(x[channel_index], y[channel_index], 1)) + 0.5f;
}

void main() {
    ivec2 position = ivec2(gl_GlobalInvocationID.xy);
    vec4 current = imageLoad(in_texture, position);
	vec3 sobel = generate(position);
	vec4 new = 
		vec4(
			(channel & CHANNEL_RED) != 0 ? sobel.r : current.r,
			(channel & CHANNEL_GREEN) != 0 ? sobel.g : current.g,
			(channel & CHANNEL_BLUE) != 0 ? sobel.b : current.b,
			(channel & CHANNEL_ALPHA) != 0 ? 1 : current.a);
    imageStore(out_texture, position, new);
}